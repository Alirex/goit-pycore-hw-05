[project]
name = "goit-pycore-hw-05"
version = "0.1.0"
description = "Homeworks"
readme = "README.md"
authors = [
    { name = "alirex", email = "alirex.prime@gmail.com" }
]
requires-python = ">=3.14.0"
dependencies = []

[dependency-groups]
dev = [
    # Static type checker
    "mypy>=1.18.2",
    # Tests.
    "pytest>=8.4.2",
]


[project.scripts]
#task_1 = "goit_pycore_hw_04.task_1.main:main"
#task_2 = "goit_pycore_hw_04.task_2.main:main"
#task_3 = "goit_pycore_hw_04.task_3.main:main"
#task_4 = "goit_pycore_hw_04.task_4.main:main"

[build-system]
requires = ["uv_build>=0.9.5,<0.10.0"]
build-backend = "uv_build"

[tool.mypy]
strict = true

[tool.ruff]
line-length = 120

extend-exclude = [
]

[tool.ruff.lint]
extend-select = [
    "ALL",
]
extend-ignore = [
    # Missing docstring.
    "D1",
    # flake8-future-annotations.
    "FA",
    # Missing type annotation for self and cls.
    "ANN1",
    # f-strings to format logging messages.
    "G004",
    # Consider {expression} instead of string join.
    "FLY002",
    # TODO: Remove after this will be implemented in MyPy.
    # Type alias {name} uses TypeAlias annotation instead of the type keyword
    "UP040",
    # TODOs
    # Author.
    "TD002",
    # Link to issue
    "TD003",
    # Line contains a TODO or related comment
    "FIX",
    # Args and kwargs are not used and not annotated
    "ANN002",
    "ANN003",
    # Commented code
    "ERA001",
    # empty-comment
    "PLR2044",
    #
    #
    # print used.
    "T201",
]

task-tags = [
    "TODO",
    "FIXME",
    "HACK",
    "XXX",
    "[",
]

[tool.ruff.lint.pydocstyle]
convention = "google"
# https://betterprogramming.pub/3-different-docstring-formats-for-python-d27be81e0d68

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true


[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
    # Unused import.
    "F401",
]

"test_*.py" = [
    # Allow `assert` statements in tests.
    "S101",
]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
]
runtime-evaluated-decorators = [
    "pydantic.validate_call",
    "app.command",
]
